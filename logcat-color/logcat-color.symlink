
# Path to adb
adb = "/Users/mculpepper/Code/B2G-dev/out/host/darwin-x86/bin/adb"

# Width of the TAG column
tag_width = 12

# Whether or not to wrap the message width inside a column
wrap = False

# Custom Logcat profiles
def negated_regex(regex):
  return r"^(?!.*" + regex + ").*$"

class B2GProfile(Profile):
    IGNORE_TAGS = ("IdleService", "ONCRPC", "memalloc", "CALCFPS", \
                   "AudioPolicyManager", "AudioFlinger")

    def __init__(self, **kwargs):
        filters = self.get_b2g_filters()
        if "filters" in kwargs:
            filters += kwargs["filters"]

        if "format" not in kwargs:
            kwargs["format"] = "threadtime"

        kwargs["filters"] = filters
        Profile.__init__(self, **kwargs)

    def get_b2g_filters(self):
        return (
            # javascript gc messages
            negated_regex(r"([CG]C\(T\+|Totals: (Mark|Purge|Begin Callback): |Slice: |ForgetSkippable)"),
            # forms.js loaded
            negated_regex(r"forms.js loaded"),
            # tags we don't care about
            lambda data: data.get("tag") not in self.IGNORE_TAGS,
            lambda data: "-*- SettingsManager" not in data.get("message")
        )

B2GProfile(name = "ril",
    buffers = ("radio", "main"),
    tags = {
        "Gecko": BLUE,
        "GeckoConsole": GREEN,
        "RIL": YELLOW,
        "RILC": YELLOW
    }
)

dupUpdateMsgFilter = negated_regex(r"\*\*\* (AUS|UTM)\:SVC")

B2GProfile(name = "updates",
    tags = {
        "Gecko": BLUE,
        "GeckoConsole": GREEN,
        "GeckoDump": BLUE,
        "GeckoUpdater": RED,
        "GonkAutoMounter": WHITE
    },
    filters =  (dupUpdateMsgFilter, )
)

def otoroFilter(data):
    tag = data.get("tag")
    return not ("AudioHardware" in tag or "Adreno" in tag)

B2GProfile(name = "otoro", device = "full_otoro", filters = (otoroFilter, ))
B2GProfile(name = "unagi", device = "full_unagi", filters = (otoroFilter, ))
B2GProfile(name = "inari", filters = (otoroFilter, ))
B2GProfile(name = "nexus-s", device = "39318E867DC300EC")

def settingsFilter(data):
    message = data.get("message")
    if not message:
        return False

    return message.startswith("-*- Settings")

B2GProfile(name = "settings", filters = (otoroFilter, settingsFilter))
