#!/usr/bin/env python
from ConfigParser import ConfigParser
import optparse
import os
import re
import subprocess
import sys
import webbrowser

def mxr_url(**data):
    url_format = "https://mxr.mozilla.org/%(repo)s/source/%(path)s"
    if "line" in data:
        url_format += "#%(line)s"
    return url_format % data

def dxr_url(**data):
    url_format = "http://dxr.mozilla.org/%(repo)s"
    url_format += "/%(path)s" if data["is_dir"] else "/%(path)s.html"
    if "line" in data:
        url_format += "#%(line)s"
    return url_format % data

def github_url(**data):
    url_format = "https://github.com/%(github_user)s/%(repo)s/blob/master/%(path)s"
    if "line" in data:
        url_format += "#L%(line)s"
    return url_format % data

class Repo(object):
    def __init__(self, repo_dir):
        self.repo_dir = repo_dir
        self.is_mc = self.is_mi = self.is_github = False
        self.github_user = self.github_repo = None

    def get_browse_url(self, browser, path, line):
        url_data = {
            "path": os.path.relpath(path, self.repo_dir),
            "is_dir": os.path.isdir(path)
        }

        if self.is_github:
            url_data["github_user"] = self.github_user
            url_data["repo"] = self.github_repo
        elif self.is_mc:
            url_data["github_user"] = "mozilla"
            url_data["repo"] = "mozilla-central"
        elif self.is_mi:
            url_data["github_user"] = "mozilla"
            url_data["repo"] = "mozilla-inbound"

        if line:
            url_data["line"] = line

        if self.is_mc or self.is_mi:
            if browser == "dxr":
                return dxr_url(**url_data)
            elif browser == "mxr":
                return mxr_url(**url_data)
            elif browser == "github":
                return github_url(**url_data)

        if self.is_github:
            return github_url(**url_data)

        return None

class GitRepo(Repo):
    @classmethod
    def is_git_repo(cls, path):
        git_dir = os.path.join(path, ".git")
        git_config = os.path.join(git_dir, "config")
        return os.path.isdir(git_dir) and os.path.isfile(git_config)

    def __init__(self, repo_dir):
        Repo.__init__(self, repo_dir)

        remotes = self.git("remote", "-v").splitlines()
        for remote in remotes:
            url = re.split("[\t ]+", remote)[1]
            if url.endswith("mozilla-central.git"):
                self.is_mc = True
            elif url.endswith("mozilla-inbound.git"):
                self.is_mi = True

            m = re.match("git(\://|@)github\.com[/\:]([^\/]+)\/([^\.]+).git", url)
            if m:
                self.is_github = True
                self.github_url = url
                self.github_user = m.group(2)
                self.github_repo = m.group(3)

    def git(self, *git_args):
        args = ("git", ) + git_args
        return subprocess.check_output(args, cwd=self.repo_dir)

class HgRepo(Repo):
    @classmethod
    def is_hg_repo(cls, path):
        hg_dir = os.path.join(path, ".hg")
        hgrc = os.path.join(hg_dir, "hgrc")
        return os.path.isdir(hg_dir) and os.path.isfile(hgrc)

    def __init__(self, repo_dir):
        Repo.__init__(self, repo_dir)

        config = ConfigParser()
        config.read(os.path.join(repo_dir, ".hg", "hgrc"))
        if not config.has_section("paths"):
            print >>sys.stderr, "No 'paths' found in HG repo: %s" % repo_dir
            sys.exit(1)

        default_url = config.get("paths", "default")
        if default_url.endswith("mozilla-central/"):
            self.is_mc = True
        elif default_url.endswith("mozilla-inbound/"):
            self.is_mi = True

def find_repo(path):
    path = os.path.realpath(path)

    if GitRepo.is_git_repo(path):
        return GitRepo(path)
    if HgRepo.is_hg_repo(path):
        return HgRepo(path)

    parent_path = os.path.realpath(os.path.join(path, os.path.pardir))
    if parent_path == path:
        return None

    return find_repo(parent_path)

def browse_url(url, options):
    new_value = 0
    if options.new_window:
        new_value = 1
    elif options.new_tab:
        new_value = 2

    autoraise = not options.background
    webbrowser.open(url, new=new_value, autoraise=autoraise)

def main():
    parser = optparse.OptionParser(
        usage="Usage: %prog [options] path/to/dir-or-file")
    parser.add_option("-b", "--browser", dest="browser",
        choices=("dxr", "mxr", "github"), default="dxr",
        help="try to override the default behavior, and use a custom browser. "+
             "supported browsers: dxr (default for most), mxr, github " +
             "(default for github specific repos)")
    parser.add_option("-l", "--line", dest="line", default=None,
        help="line number to open with (default: no line number)")
    parser.add_option("-w", "--new-window", dest="new_window",
        action="store_true", default=False,
        help="browse in a new window (default: use current window)")
    parser.add_option("-t", "--new-tab", dest="new_tab",
        action="store_true", default=False,
        help="browse in a new tab (most browsers will do this by default)")
    parser.add_option("-B", "--background", dest="background",
        action="store_true", default=False,
        help="open browser in the background (default: bring to front)")

    (options, args) = parser.parse_args()

    if len(args) < 1:
        print >>sys.stderr, "Error: no path specified"
        parser.print_help()
        sys.exit(1)

    path = os.path.abspath(args[0])
    repo = find_repo(path)
    if not repo:
        print >>sys.stderr, \
            "Could not find parent Git or HG repository to browse for %s" % path
        sys.exit(1)

    url = repo.get_browse_url(options.browser, path, options.line)
    print url
    browse_url(url, options)

if __name__ == "__main__":
    main()
